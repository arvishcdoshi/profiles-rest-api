We have to specify the model manager that we're going to use fot the objects and this
is required because we need to use our custom user model with the Django CLI.. so Django
needs to have a custom model manager for the user model so it knows how to create users
and control users using the Django command line tools...

ex(look in our code)
objects = UserProfileManager()

-->In the parenthesis, we will pass in the class we're going to create the manager class
we will also  create UserProfileManager class further...

***APIView***

--> The most basic type of view we can use to build our API...it enables us to
describe the logic which makes our API endpoint...

An APIView allows us to define functions that match the standard HTTP methods...GET,POST,PUT,PATCH,delete

By allowing us to customize the function for each HTTP method on our API URL, API views give us the most control
over our application logic

WHEN SHOULD YOU USE APIVIEWS ?
--> Need full control over application logic
--> Processing files and rendering a synchronous response
--> When calling external APIs/services.
--> Access to local files or data..

The HelloApiView--->  It allows us to define the application logic for our endpoint that

we're going to assign to this view (i.e. HelloApiView)..the way it works is you define
a URL which is our endpoint and then you assign it to this view and the Django rest_framework
handles it by calling appropriate function in the view for the HTTP request that we make..so
we're going to be accepting HTTP GET request to our API,


Serializer --> It is a feature from the Django rest framework that allows you to easily convert
               data inputs into Python objects and vice-versa..its kind of similar to a Django form which you
              define and it has the various fields that you want to accept for the input for your api
              so, if we are going to add post or update functionality to our HelloApiView, then we need
              to create a serializer to recieve the content that we post to the API...

              We use serializers to tell our APIView what data to expect when making POST,PUT and PATCH
              requests to our API ..

              we set serializer by writing...
              --> serializer_class = serializers.HelloSerializer()
              ** This configures our APIView to have the serializer class that we already created...
              It says whenever you are sending a post,put or patch request..expect an input
              with name and we validate that input to a maximum length of 10...


ViewSets --> The Django Rest Framework offers two classes that help us write the logic for our
API: the APIView and the ViewSet..

 What are ViewSets ?
 --> Just like APIView, the ViewSets allow us to write the logic for our endpoints however instead of defining functions,
     which map to HTTP methods, ViewSets accept functions that map to common API object actions such as
     'list' for getting list of objects
     'create' for creating new objects
     'retrieve' for getting a specific object
     'update' for updating an object
     'partial_update' for updating part of object
     'destroy' for deleting an object


  When should we use ViewSet ?
  --> A simple CRUD interface to your database
  --> A quick and simple api to manage predefined objects
  --> Little to no customization on the logic
  --> If our API is working with standard database structure..


when we access http://127.0.0.1:8000/api/hello_viewset...
we do HTTP get request to the base of the registered view which will take us to the
'list' function
